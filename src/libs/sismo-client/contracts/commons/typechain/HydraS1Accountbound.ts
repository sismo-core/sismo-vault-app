/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type AttestationStruct = {
  collectionId: BigNumberish;
  owner: string;
  issuer: string;
  value: BigNumberish;
  timestamp: BigNumberish;
  extraData: BytesLike;
};

export type AttestationStructOutput = [
  BigNumber,
  string,
  string,
  BigNumber,
  number,
  string
] & {
  collectionId: BigNumber;
  owner: string;
  issuer: string;
  value: BigNumber;
  timestamp: number;
  extraData: string;
};

export type ClaimStruct = {
  groupId: BigNumberish;
  claimedValue: BigNumberish;
  extraData: BytesLike;
};

export type ClaimStructOutput = [BigNumber, BigNumber, string] & {
  groupId: BigNumber;
  claimedValue: BigNumber;
  extraData: string;
};

export type RequestStruct = { claims: ClaimStruct[]; destination: string };

export type RequestStructOutput = [ClaimStructOutput[], string] & {
  claims: ClaimStructOutput[];
  destination: string;
};

export interface HydraS1AccountboundAttesterInterface extends utils.Interface {
  contractName: "HydraS1AccountboundAttester";
  functions: {
    "AUTHORIZED_COLLECTION_ID_FIRST()": FunctionFragment;
    "AUTHORIZED_COLLECTION_ID_LAST()": FunctionFragment;
    "IMPLEMENTATION_VERSION()": FunctionFragment;
    "_getNextBurnCount(uint256,address)": FunctionFragment;
    "buildAttestations(((uint256,uint256,bytes)[],address),bytes)": FunctionFragment;
    "deleteAttestations(uint256[],address,bytes)": FunctionFragment;
    "generateAttestations(((uint256,uint256,bytes)[],address),bytes)": FunctionFragment;
    "getAttestationRegistry()": FunctionFragment;
    "getAvailableRootsRegistry()": FunctionFragment;
    "getBurnCountFromExtraData(bytes)": FunctionFragment;
    "getCommitmentMapperRegistry()": FunctionFragment;
    "getCooldownDurationForGroupIndex(uint256)": FunctionFragment;
    "getDestinationOfNullifier(uint256)": FunctionFragment;
    "getNullifierBurnCount(uint256)": FunctionFragment;
    "getNullifierCooldownStart(uint256)": FunctionFragment;
    "getNullifierFromExtraData(bytes)": FunctionFragment;
    "getVerifier()": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setCooldownDurationForGroupIndex(uint256,uint32)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "AUTHORIZED_COLLECTION_ID_FIRST",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "AUTHORIZED_COLLECTION_ID_LAST",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "IMPLEMENTATION_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_getNextBurnCount",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "buildAttestations",
    values: [RequestStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteAttestations",
    values: [BigNumberish[], string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "generateAttestations",
    values: [RequestStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAttestationRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableRootsRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBurnCountFromExtraData",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCommitmentMapperRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCooldownDurationForGroupIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDestinationOfNullifier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNullifierBurnCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNullifierCooldownStart",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNullifierFromExtraData",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVerifier",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCooldownDurationForGroupIndex",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "AUTHORIZED_COLLECTION_ID_FIRST",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "AUTHORIZED_COLLECTION_ID_LAST",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "IMPLEMENTATION_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getNextBurnCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buildAttestations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteAttestations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateAttestations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAttestationRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableRootsRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBurnCountFromExtraData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCommitmentMapperRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCooldownDurationForGroupIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDestinationOfNullifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNullifierBurnCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNullifierCooldownStart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNullifierFromExtraData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCooldownDurationForGroupIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "AttestationDeleted(tuple)": EventFragment;
    "AttestationGenerated(tuple)": EventFragment;
    "CooldownDurationSetForGroupIndex(uint256,uint32)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "NullifierDestinationUpdated(uint256,address)": EventFragment;
    "NullifierSetOnCooldown(uint256,uint16)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AttestationDeleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AttestationGenerated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "CooldownDurationSetForGroupIndex"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "NullifierDestinationUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NullifierSetOnCooldown"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type AttestationDeletedEvent = TypedEvent<
  [AttestationStructOutput],
  { attestation: AttestationStructOutput }
>;

export type AttestationDeletedEventFilter =
  TypedEventFilter<AttestationDeletedEvent>;

export type AttestationGeneratedEvent = TypedEvent<
  [AttestationStructOutput],
  { attestation: AttestationStructOutput }
>;

export type AttestationGeneratedEventFilter =
  TypedEventFilter<AttestationGeneratedEvent>;

export type CooldownDurationSetForGroupIndexEvent = TypedEvent<
  [BigNumber, number],
  { groupIndex: BigNumber; cooldownDuration: number }
>;

export type CooldownDurationSetForGroupIndexEventFilter =
  TypedEventFilter<CooldownDurationSetForGroupIndexEvent>;

export type InitializedEvent = TypedEvent<[number], { version: number }>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export type NullifierDestinationUpdatedEvent = TypedEvent<
  [BigNumber, string],
  { nullifier: BigNumber; newOwner: string }
>;

export type NullifierDestinationUpdatedEventFilter =
  TypedEventFilter<NullifierDestinationUpdatedEvent>;

export type NullifierSetOnCooldownEvent = TypedEvent<
  [BigNumber, number],
  { nullifier: BigNumber; burnCount: number }
>;

export type NullifierSetOnCooldownEventFilter =
  TypedEventFilter<NullifierSetOnCooldownEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface HydraS1AccountboundAttester extends BaseContract {
  contractName: "HydraS1AccountboundAttester";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: HydraS1AccountboundAttesterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    AUTHORIZED_COLLECTION_ID_FIRST(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    AUTHORIZED_COLLECTION_ID_LAST(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    IMPLEMENTATION_VERSION(overrides?: CallOverrides): Promise<[number]>;

    _getNextBurnCount(
      nullifier: BigNumberish,
      claimDestination: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    buildAttestations(
      request: RequestStruct,
      proofData: BytesLike,
      overrides?: CallOverrides
    ): Promise<[AttestationStructOutput[]]>;

    deleteAttestations(
      collectionIds: BigNumberish[],
      attestationsOwner: string,
      proofData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    generateAttestations(
      request: RequestStruct,
      proofData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAttestationRegistry(overrides?: CallOverrides): Promise<[string]>;

    getAvailableRootsRegistry(overrides?: CallOverrides): Promise<[string]>;

    getBurnCountFromExtraData(
      extraData: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getCommitmentMapperRegistry(overrides?: CallOverrides): Promise<[string]>;

    getCooldownDurationForGroupIndex(
      groupIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getDestinationOfNullifier(
      nullifier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getNullifierBurnCount(
      nullifier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getNullifierCooldownStart(
      nullifier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getNullifierFromExtraData(
      extraData: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getVerifier(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      ownerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCooldownDurationForGroupIndex(
      groupIndex: BigNumberish,
      cooldownDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  AUTHORIZED_COLLECTION_ID_FIRST(overrides?: CallOverrides): Promise<BigNumber>;

  AUTHORIZED_COLLECTION_ID_LAST(overrides?: CallOverrides): Promise<BigNumber>;

  IMPLEMENTATION_VERSION(overrides?: CallOverrides): Promise<number>;

  _getNextBurnCount(
    nullifier: BigNumberish,
    claimDestination: string,
    overrides?: CallOverrides
  ): Promise<number>;

  buildAttestations(
    request: RequestStruct,
    proofData: BytesLike,
    overrides?: CallOverrides
  ): Promise<AttestationStructOutput[]>;

  deleteAttestations(
    collectionIds: BigNumberish[],
    attestationsOwner: string,
    proofData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  generateAttestations(
    request: RequestStruct,
    proofData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAttestationRegistry(overrides?: CallOverrides): Promise<string>;

  getAvailableRootsRegistry(overrides?: CallOverrides): Promise<string>;

  getBurnCountFromExtraData(
    extraData: BytesLike,
    overrides?: CallOverrides
  ): Promise<number>;

  getCommitmentMapperRegistry(overrides?: CallOverrides): Promise<string>;

  getCooldownDurationForGroupIndex(
    groupIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  getDestinationOfNullifier(
    nullifier: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getNullifierBurnCount(
    nullifier: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  getNullifierCooldownStart(
    nullifier: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  getNullifierFromExtraData(
    extraData: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVerifier(overrides?: CallOverrides): Promise<string>;

  initialize(
    ownerAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCooldownDurationForGroupIndex(
    groupIndex: BigNumberish,
    cooldownDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    AUTHORIZED_COLLECTION_ID_FIRST(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    AUTHORIZED_COLLECTION_ID_LAST(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    IMPLEMENTATION_VERSION(overrides?: CallOverrides): Promise<number>;

    _getNextBurnCount(
      nullifier: BigNumberish,
      claimDestination: string,
      overrides?: CallOverrides
    ): Promise<number>;

    buildAttestations(
      request: RequestStruct,
      proofData: BytesLike,
      overrides?: CallOverrides
    ): Promise<AttestationStructOutput[]>;

    deleteAttestations(
      collectionIds: BigNumberish[],
      attestationsOwner: string,
      proofData: BytesLike,
      overrides?: CallOverrides
    ): Promise<AttestationStructOutput[]>;

    generateAttestations(
      request: RequestStruct,
      proofData: BytesLike,
      overrides?: CallOverrides
    ): Promise<AttestationStructOutput[]>;

    getAttestationRegistry(overrides?: CallOverrides): Promise<string>;

    getAvailableRootsRegistry(overrides?: CallOverrides): Promise<string>;

    getBurnCountFromExtraData(
      extraData: BytesLike,
      overrides?: CallOverrides
    ): Promise<number>;

    getCommitmentMapperRegistry(overrides?: CallOverrides): Promise<string>;

    getCooldownDurationForGroupIndex(
      groupIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    getDestinationOfNullifier(
      nullifier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getNullifierBurnCount(
      nullifier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    getNullifierCooldownStart(
      nullifier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    getNullifierFromExtraData(
      extraData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVerifier(overrides?: CallOverrides): Promise<string>;

    initialize(ownerAddress: string, overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setCooldownDurationForGroupIndex(
      groupIndex: BigNumberish,
      cooldownDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AttestationDeleted(tuple)"(
      attestation?: null
    ): AttestationDeletedEventFilter;
    AttestationDeleted(attestation?: null): AttestationDeletedEventFilter;

    "AttestationGenerated(tuple)"(
      attestation?: null
    ): AttestationGeneratedEventFilter;
    AttestationGenerated(attestation?: null): AttestationGeneratedEventFilter;

    "CooldownDurationSetForGroupIndex(uint256,uint32)"(
      groupIndex?: BigNumberish | null,
      cooldownDuration?: null
    ): CooldownDurationSetForGroupIndexEventFilter;
    CooldownDurationSetForGroupIndex(
      groupIndex?: BigNumberish | null,
      cooldownDuration?: null
    ): CooldownDurationSetForGroupIndexEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "NullifierDestinationUpdated(uint256,address)"(
      nullifier?: null,
      newOwner?: null
    ): NullifierDestinationUpdatedEventFilter;
    NullifierDestinationUpdated(
      nullifier?: null,
      newOwner?: null
    ): NullifierDestinationUpdatedEventFilter;

    "NullifierSetOnCooldown(uint256,uint16)"(
      nullifier?: BigNumberish | null,
      burnCount?: null
    ): NullifierSetOnCooldownEventFilter;
    NullifierSetOnCooldown(
      nullifier?: BigNumberish | null,
      burnCount?: null
    ): NullifierSetOnCooldownEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    AUTHORIZED_COLLECTION_ID_FIRST(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    AUTHORIZED_COLLECTION_ID_LAST(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    IMPLEMENTATION_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    _getNextBurnCount(
      nullifier: BigNumberish,
      claimDestination: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buildAttestations(
      request: RequestStruct,
      proofData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deleteAttestations(
      collectionIds: BigNumberish[],
      attestationsOwner: string,
      proofData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    generateAttestations(
      request: RequestStruct,
      proofData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAttestationRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    getAvailableRootsRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    getBurnCountFromExtraData(
      extraData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCommitmentMapperRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    getCooldownDurationForGroupIndex(
      groupIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDestinationOfNullifier(
      nullifier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNullifierBurnCount(
      nullifier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNullifierCooldownStart(
      nullifier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNullifierFromExtraData(
      extraData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVerifier(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      ownerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCooldownDurationForGroupIndex(
      groupIndex: BigNumberish,
      cooldownDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    AUTHORIZED_COLLECTION_ID_FIRST(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    AUTHORIZED_COLLECTION_ID_LAST(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    IMPLEMENTATION_VERSION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getNextBurnCount(
      nullifier: BigNumberish,
      claimDestination: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buildAttestations(
      request: RequestStruct,
      proofData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deleteAttestations(
      collectionIds: BigNumberish[],
      attestationsOwner: string,
      proofData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    generateAttestations(
      request: RequestStruct,
      proofData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAttestationRegistry(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAvailableRootsRegistry(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBurnCountFromExtraData(
      extraData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCommitmentMapperRegistry(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCooldownDurationForGroupIndex(
      groupIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDestinationOfNullifier(
      nullifier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNullifierBurnCount(
      nullifier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNullifierCooldownStart(
      nullifier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNullifierFromExtraData(
      extraData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVerifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      ownerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCooldownDurationForGroupIndex(
      groupIndex: BigNumberish,
      cooldownDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
