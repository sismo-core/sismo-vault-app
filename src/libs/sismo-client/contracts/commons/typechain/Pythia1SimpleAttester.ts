/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";
import {
  AttestationDeletedEventFilter,
  AttestationGeneratedEventFilter,
  AttestationStructOutput,
  InitializedEventFilter,
  OwnershipTransferredEventFilter,
  RequestStruct,
} from ".";

export interface Pythia1SimpleAttesterInterface extends utils.Interface {
  contractName: "Pythia1SimpleAttester";
  functions: {
    "AUTHORIZED_COLLECTION_ID_FIRST()": FunctionFragment;
    "AUTHORIZED_COLLECTION_ID_LAST()": FunctionFragment;
    "IMPLEMENTATION_VERSION()": FunctionFragment;
    "buildAttestations(((uint256,uint256,bytes)[],address),bytes)": FunctionFragment;
    "deleteAttestations(uint256[],address,bytes)": FunctionFragment;
    "generateAttestations(((uint256,uint256,bytes)[],address),bytes)": FunctionFragment;
    "getAttestationRegistry()": FunctionFragment;
    "getCommitmentSignerPubKey()": FunctionFragment;
    "getDestinationOfNullifier(uint256)": FunctionFragment;
    "getVerifier()": FunctionFragment;
    "initialize(uint256[2],address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateCommitmentSignerPubKey(uint256[2])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "AUTHORIZED_COLLECTION_ID_FIRST",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "AUTHORIZED_COLLECTION_ID_LAST",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "IMPLEMENTATION_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buildAttestations",
    values: [RequestStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteAttestations",
    values: [BigNumberish[], string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "generateAttestations",
    values: [RequestStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAttestationRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCommitmentSignerPubKey",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDestinationOfNullifier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVerifier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [[BigNumberish, BigNumberish], string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCommitmentSignerPubKey",
    values: [[BigNumberish, BigNumberish]]
  ): string;

  decodeFunctionResult(
    functionFragment: "AUTHORIZED_COLLECTION_ID_FIRST",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "AUTHORIZED_COLLECTION_ID_LAST",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "IMPLEMENTATION_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buildAttestations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteAttestations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateAttestations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAttestationRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCommitmentSignerPubKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDestinationOfNullifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCommitmentSignerPubKey",
    data: BytesLike
  ): Result;

  events: {
    "AttestationDeleted(tuple)": EventFragment;
    "AttestationGenerated(tuple)": EventFragment;
    "CommitmentSignerPubKeyUpdated(uint256[2])": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "TicketDestinationUpdated(uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AttestationDeleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AttestationGenerated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "CommitmentSignerPubKeyUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TicketDestinationUpdated"): EventFragment;
}

export type CommitmentSignerPubKeyUpdatedEvent = TypedEvent<
  [[BigNumber, BigNumber]],
  { newCommitmentSignerPubKey: [BigNumber, BigNumber] }
>;

export type CommitmentSignerPubKeyUpdatedEventFilter =
  TypedEventFilter<CommitmentSignerPubKeyUpdatedEvent>;

export type TicketDestinationUpdatedEvent = TypedEvent<
  [BigNumber, string],
  { ticket: BigNumber; newOwner: string }
>;

export type TicketDestinationUpdatedEventFilter =
  TypedEventFilter<TicketDestinationUpdatedEvent>;

export interface Pythia1SimpleAttester extends BaseContract {
  contractName: "Pythia1SimpleAttester";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: Pythia1SimpleAttesterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    AUTHORIZED_COLLECTION_ID_FIRST(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    AUTHORIZED_COLLECTION_ID_LAST(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    IMPLEMENTATION_VERSION(overrides?: CallOverrides): Promise<[number]>;

    buildAttestations(
      request: RequestStruct,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[AttestationStructOutput[]]>;

    deleteAttestations(
      collectionIds: BigNumberish[],
      attestationsOwner: string,
      proofData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    generateAttestations(
      request: RequestStruct,
      proofData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAttestationRegistry(overrides?: CallOverrides): Promise<[string]>;

    getCommitmentSignerPubKey(
      overrides?: CallOverrides
    ): Promise<[[BigNumber, BigNumber]]>;

    getDestinationOfNullifier(
      userTicket: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getVerifier(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      commitmentSignerPubKey: [BigNumberish, BigNumberish],
      ownerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateCommitmentSignerPubKey(
      commitmentSignerPubKey: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  AUTHORIZED_COLLECTION_ID_FIRST(overrides?: CallOverrides): Promise<BigNumber>;

  AUTHORIZED_COLLECTION_ID_LAST(overrides?: CallOverrides): Promise<BigNumber>;

  IMPLEMENTATION_VERSION(overrides?: CallOverrides): Promise<number>;

  buildAttestations(
    request: RequestStruct,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<AttestationStructOutput[]>;

  deleteAttestations(
    collectionIds: BigNumberish[],
    attestationsOwner: string,
    proofData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  generateAttestations(
    request: RequestStruct,
    proofData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAttestationRegistry(overrides?: CallOverrides): Promise<string>;

  getCommitmentSignerPubKey(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  getDestinationOfNullifier(
    userTicket: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getVerifier(overrides?: CallOverrides): Promise<string>;

  initialize(
    commitmentSignerPubKey: [BigNumberish, BigNumberish],
    ownerAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateCommitmentSignerPubKey(
    commitmentSignerPubKey: [BigNumberish, BigNumberish],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    AUTHORIZED_COLLECTION_ID_FIRST(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    AUTHORIZED_COLLECTION_ID_LAST(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    IMPLEMENTATION_VERSION(overrides?: CallOverrides): Promise<number>;

    buildAttestations(
      request: RequestStruct,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<AttestationStructOutput[]>;

    deleteAttestations(
      collectionIds: BigNumberish[],
      attestationsOwner: string,
      proofData: BytesLike,
      overrides?: CallOverrides
    ): Promise<AttestationStructOutput[]>;

    generateAttestations(
      request: RequestStruct,
      proofData: BytesLike,
      overrides?: CallOverrides
    ): Promise<AttestationStructOutput[]>;

    getAttestationRegistry(overrides?: CallOverrides): Promise<string>;

    getCommitmentSignerPubKey(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getDestinationOfNullifier(
      userTicket: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getVerifier(overrides?: CallOverrides): Promise<string>;

    initialize(
      commitmentSignerPubKey: [BigNumberish, BigNumberish],
      ownerAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateCommitmentSignerPubKey(
      commitmentSignerPubKey: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AttestationDeleted(tuple)"(
      attestation?: null
    ): AttestationDeletedEventFilter;
    AttestationDeleted(attestation?: null): AttestationDeletedEventFilter;

    "AttestationGenerated(tuple)"(
      attestation?: null
    ): AttestationGeneratedEventFilter;
    AttestationGenerated(attestation?: null): AttestationGeneratedEventFilter;

    "CommitmentSignerPubKeyUpdated(uint256[2])"(
      newCommitmentSignerPubKey?: null
    ): CommitmentSignerPubKeyUpdatedEventFilter;
    CommitmentSignerPubKeyUpdated(
      newCommitmentSignerPubKey?: null
    ): CommitmentSignerPubKeyUpdatedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "TicketDestinationUpdated(uint256,address)"(
      ticket?: null,
      newOwner?: null
    ): TicketDestinationUpdatedEventFilter;
    TicketDestinationUpdated(
      ticket?: null,
      newOwner?: null
    ): TicketDestinationUpdatedEventFilter;
  };

  estimateGas: {
    AUTHORIZED_COLLECTION_ID_FIRST(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    AUTHORIZED_COLLECTION_ID_LAST(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    IMPLEMENTATION_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    buildAttestations(
      request: RequestStruct,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deleteAttestations(
      collectionIds: BigNumberish[],
      attestationsOwner: string,
      proofData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    generateAttestations(
      request: RequestStruct,
      proofData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAttestationRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    getCommitmentSignerPubKey(overrides?: CallOverrides): Promise<BigNumber>;

    getDestinationOfNullifier(
      userTicket: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVerifier(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      commitmentSignerPubKey: [BigNumberish, BigNumberish],
      ownerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateCommitmentSignerPubKey(
      commitmentSignerPubKey: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    AUTHORIZED_COLLECTION_ID_FIRST(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    AUTHORIZED_COLLECTION_ID_LAST(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    IMPLEMENTATION_VERSION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buildAttestations(
      request: RequestStruct,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deleteAttestations(
      collectionIds: BigNumberish[],
      attestationsOwner: string,
      proofData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    generateAttestations(
      request: RequestStruct,
      proofData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAttestationRegistry(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCommitmentSignerPubKey(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDestinationOfNullifier(
      userTicket: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVerifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      commitmentSignerPubKey: [BigNumberish, BigNumberish],
      ownerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateCommitmentSignerPubKey(
      commitmentSignerPubKey: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
