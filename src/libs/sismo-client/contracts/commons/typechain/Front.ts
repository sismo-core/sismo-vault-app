/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";
import { AttestationStructOutput, RequestStruct } from ".";

export interface FrontInterface extends utils.Interface {
  contractName: "Front";
  functions: {
    "ATTESTATIONS_REGISTRY()": FunctionFragment;
    "EARLY_USER_BADGE_END_DATE()": FunctionFragment;
    "EARLY_USER_COLLECTION()": FunctionFragment;
    "batchBuildAttestations(address[],((uint256,uint256,bytes)[],address)[],bytes[])": FunctionFragment;
    "batchGenerateAttestations(address[],((uint256,uint256,bytes)[],address)[],bytes[])": FunctionFragment;
    "buildAttestations(address,((uint256,uint256,bytes)[],address),bytes)": FunctionFragment;
    "generateAttestations(address,((uint256,uint256,bytes)[],address),bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ATTESTATIONS_REGISTRY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EARLY_USER_BADGE_END_DATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EARLY_USER_COLLECTION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "batchBuildAttestations",
    values: [string[], RequestStruct[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchGenerateAttestations",
    values: [string[], RequestStruct[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "buildAttestations",
    values: [string, RequestStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "generateAttestations",
    values: [string, RequestStruct, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "ATTESTATIONS_REGISTRY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EARLY_USER_BADGE_END_DATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EARLY_USER_COLLECTION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchBuildAttestations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchGenerateAttestations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buildAttestations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateAttestations",
    data: BytesLike
  ): Result;

  events: {
    "EarlyUserAttestationGenerated(address)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "EarlyUserAttestationGenerated"
  ): EventFragment;
}

export type EarlyUserAttestationGeneratedEvent = TypedEvent<
  [string],
  { destination: string }
>;

export type EarlyUserAttestationGeneratedEventFilter =
  TypedEventFilter<EarlyUserAttestationGeneratedEvent>;

export interface Front extends BaseContract {
  contractName: "Front";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FrontInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ATTESTATIONS_REGISTRY(overrides?: CallOverrides): Promise<[string]>;

    EARLY_USER_BADGE_END_DATE(overrides?: CallOverrides): Promise<[number]>;

    EARLY_USER_COLLECTION(overrides?: CallOverrides): Promise<[BigNumber]>;

    batchBuildAttestations(
      attesters: string[],
      requests: RequestStruct[],
      proofDataArray: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[AttestationStructOutput[]]>;

    batchGenerateAttestations(
      attesters: string[],
      requests: RequestStruct[],
      proofDataArray: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buildAttestations(
      attester: string,
      request: RequestStruct,
      proofData: BytesLike,
      overrides?: CallOverrides
    ): Promise<[AttestationStructOutput[]]>;

    generateAttestations(
      attester: string,
      request: RequestStruct,
      proofData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  ATTESTATIONS_REGISTRY(overrides?: CallOverrides): Promise<string>;

  EARLY_USER_BADGE_END_DATE(overrides?: CallOverrides): Promise<number>;

  EARLY_USER_COLLECTION(overrides?: CallOverrides): Promise<BigNumber>;

  batchBuildAttestations(
    attesters: string[],
    requests: RequestStruct[],
    proofDataArray: BytesLike[],
    overrides?: CallOverrides
  ): Promise<AttestationStructOutput[]>;

  batchGenerateAttestations(
    attesters: string[],
    requests: RequestStruct[],
    proofDataArray: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buildAttestations(
    attester: string,
    request: RequestStruct,
    proofData: BytesLike,
    overrides?: CallOverrides
  ): Promise<AttestationStructOutput[]>;

  generateAttestations(
    attester: string,
    request: RequestStruct,
    proofData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ATTESTATIONS_REGISTRY(overrides?: CallOverrides): Promise<string>;

    EARLY_USER_BADGE_END_DATE(overrides?: CallOverrides): Promise<number>;

    EARLY_USER_COLLECTION(overrides?: CallOverrides): Promise<BigNumber>;

    batchBuildAttestations(
      attesters: string[],
      requests: RequestStruct[],
      proofDataArray: BytesLike[],
      overrides?: CallOverrides
    ): Promise<AttestationStructOutput[]>;

    batchGenerateAttestations(
      attesters: string[],
      requests: RequestStruct[],
      proofDataArray: BytesLike[],
      overrides?: CallOverrides
    ): Promise<AttestationStructOutput[]>;

    buildAttestations(
      attester: string,
      request: RequestStruct,
      proofData: BytesLike,
      overrides?: CallOverrides
    ): Promise<AttestationStructOutput[]>;

    generateAttestations(
      attester: string,
      request: RequestStruct,
      proofData: BytesLike,
      overrides?: CallOverrides
    ): Promise<AttestationStructOutput[]>;
  };

  filters: {
    "EarlyUserAttestationGenerated(address)"(
      destination?: null
    ): EarlyUserAttestationGeneratedEventFilter;
    EarlyUserAttestationGenerated(
      destination?: null
    ): EarlyUserAttestationGeneratedEventFilter;
  };

  estimateGas: {
    ATTESTATIONS_REGISTRY(overrides?: CallOverrides): Promise<BigNumber>;

    EARLY_USER_BADGE_END_DATE(overrides?: CallOverrides): Promise<BigNumber>;

    EARLY_USER_COLLECTION(overrides?: CallOverrides): Promise<BigNumber>;

    batchBuildAttestations(
      attesters: string[],
      requests: RequestStruct[],
      proofDataArray: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchGenerateAttestations(
      attesters: string[],
      requests: RequestStruct[],
      proofDataArray: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buildAttestations(
      attester: string,
      request: RequestStruct,
      proofData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    generateAttestations(
      attester: string,
      request: RequestStruct,
      proofData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ATTESTATIONS_REGISTRY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    EARLY_USER_BADGE_END_DATE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    EARLY_USER_COLLECTION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batchBuildAttestations(
      attesters: string[],
      requests: RequestStruct[],
      proofDataArray: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batchGenerateAttestations(
      attesters: string[],
      requests: RequestStruct[],
      proofDataArray: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buildAttestations(
      attester: string,
      request: RequestStruct,
      proofData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    generateAttestations(
      attester: string,
      request: RequestStruct,
      proofData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
